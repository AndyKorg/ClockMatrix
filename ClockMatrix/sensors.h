/*
 * Обслуживание внешних датчиков
 * температуры, давления и т.п.
 * При инициализации проверяется наличие файла sensor.txt на SD-карте
 * Если файла нет, то структура описывающая датчики инициализируется следующим образом:
 * - имя датчика записывается как "дN" где N порядковый индекс структуры в массиве структур, от 0 до SENSOR_MAX
 * - адрес датчика на шине от SENSOR_ADR_MASK до 0 с шагом 2. Обратите внимание что адрес сдвинут на 1 бит влево и младший бит всегда 0
 * Если файл есть то он должен иметь формат:
 * N=XXX где N - адрес датчика на шине; XXX - имя датчика на дисплее, не более трех букв. Может оканчиватся 0, 0xa, 0xd
 * Статус датчика инициализируется следующими значениями - интервал в течение которого датчик не прислал никакой отметки равен 0,
 *   датчика на шине нет, батарея датчика разряжена, нормальный режим работы (не тест). 
 *   Для датчиков определенных в файле на SD-карте флаг отображения на дисплее включается сразу
 *  v1.2
 */ 


#ifndef SENSORS_H_
#define SENSORS_H_

#include "Clock.h"

// Пока сенсоры распределены так: 
// на шине 1-ware датчик пока может быть только один, с адресом 6.
#define SENSOR_MAX			3						//Количество поддерживаемых сенсоров, не более 8. Это ограничение алгоритма, но на самом деле еще и длина выводимой строки и количество памяти влияет
#if (SENSOR_MAX>8)
	#error "Value of the SENSOR_MAX must be less than 8"	//Сообщить если количество датчиков выходит за ограничение разрядности адреса
#endif

#define SENSOR_LEN_NAME		3						//Длина имени датчика
#define SENSOR_MAX_PERIOD	30						//Период в минутах в течении которого не поступала информация от датчика. По истечении этого периода, информация считается недействительной

struct sSensor{										//Датчик температуры, давления и т.п. В eeprom сохраняются только Adr, State, Name
	u08 Adr;										//Адрес датчика. Значимыми являются биты 1,2,3. Бит 0 всегда равен 0 и фактический адрес сдвинут на 1 влево. Это сделано для того что бы различать сигнал от датчика и от ИК-приемника
	u08 Value;										//Значение измеряемой величины, возможно нужно использовать u16
	u08 State;										//Состояние датчика. Тестирование, батарея разряжена и пр. Причем старшие 4 бита определяются внешним датчиком, а младшие 4 вычисляются внутри программы часов
	u08 SleepPeriod;								//Счетчик обратного отсчета периода в течении которого не поступал сигнал от датчика. В минутах
	char Name[SENSOR_LEN_NAME];						//Имя датчика для вывода на дисплей
};

//------------------------------- Биты байта State в структуре sSensor
// TODO: Объединить описание структуры байта статуса в один совместный файл с прошивкой датчика
													//Биты от 7 до 4 поступают от датчика
#define	SENSOR_NO_SENSOR	7						//Датчик не обнаружен 1 - нет датчика на шине
#define	SENSOR_LOW_POWER	6						//Низкое напряжение батарейки 1 - слишком низкое напряжение на батарее
#define	SENSOR_TEST			5						//Режим тестирования - нажата кнопка Test, 1 - нажата кнопка Тест
#define	SENSOR_RESERV		4						//-------- Зарезервировано для будущего использования
													//Биты от 3 до 0 обрабатываются самими часами
#define SENSOR_SHOW_ON		3						//Разрешен вывод значения датчика на дисплей
#define SENSOR_RESERV_CLK1	2						//-------- Зарезервировано для будущего использования
#define SENSOR_RESERV_CLK2	1
#define SENSOR_RESERV_CLK3	0

#define SENSOR_ADR_MASK		0b00001110				//Маска адреса датчика
#define SENSOR_STATE_MASK	((1<<SENSOR_NO_SENSOR) | (1<<SENSOR_LOW_POWER) | (1<<SENSOR_TEST) | (1<<SENSOR_RESERV))	//Маска флагов статуса датчиков (не внутренние флаги!)
#define SensorSetInBus(st)	ClearBit(st.State, SENSOR_NO_SENSOR)		//Датчик на шине есть. Для радиодатчика это означает что есть ответ от радиопередатчика, но может нет ответа от самого датчика. Наличи датчика в радиодатчике проверяется через значение Value (см. флаги TMPR_NO_SENS...)
#define SensorNoInBus(st)	SetBit(st.State, SENSOR_NO_SENSOR)			//Пометить отсутствие датчика на шине
#define SensorFlgClr(st)	(st.State & (~SENSOR_STATE_MASK))			//Сброс флагов самого датчика
#define SensorIsNo(st)		BitIsSet(st.State, SENSOR_NO_SENSOR)		//Датчик отсутствует на шине?
#define SensorIsSet(st)		BitIsClear(st.State, SENSOR_NO_SENSOR)		//Датчик отвечает на шине?
#define	SensorBatareyIsLow(st)	BitIsSet(st.State, SENSOR_LOW_POWER)	//Батарея разряжена
#define SensorTestModeIsOn(st)	BitIsSet(st.State, SENSOR_TEST)			//Тестовый режим?
#define SensorShowOn(st)		SetBit(st.State, SENSOR_SHOW_ON)		//Включить отображение датчика на дисплей
#define SensorShowOff(st)		ClearBit(st.State, SENSOR_SHOW_ON)		//Выключить
#define SensorIsShow(st)		BitIsSet(st.State, SENSOR_SHOW_ON)		//Вывод на дисплей для датчика включен

//Команды для функции отображения значения датчиков. Значения выбраны исходя из того что отрицательные температуры выводятся в дополнительном коде от 0xc90 (-55 C) до 0xff (-1 C)
#define TMPR_NO_SENS		0x80					//Нет датчика
#define TMPR_BAT_LOW		0x81					//батарея датчика разряжена
#define TMPR_UNDEF			0x82					//Нет сообщений от радиодатчика

void SensorIni(void);								//Инициализация описания датчиков
void SetSensor(u08 Adr, u08 Stat, u08 Value);		//Запись адреса-статуса и значения сенсора
struct sSensor *SensorNum(u08 id);					//Возвращает указатель на сенсор id

#define SensorFromIdx(id)	(*SensorNum(id))

#endif /* SENSORS_H_ */